version: 2.1

orbs:
  slack: circleci/slack@4.4.4

## jobs
jobs:
  
  build:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      
      - run:
          name: Building the app 
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  test:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      
      - run:
          name: Lint test
          command: |
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  lint:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      
      - run:
          name: Lint test
          command: |
            npm install
            npm run lint
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
 
  
  buildDocker:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      # start proprietary DB using private Docker image
      # with credentials stored in the UI
      - run: |
          echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
          

      # build the application image and check dockerlint by hadolint 
      - run: |
          docker run --rm -i ghcr.io/hadolint/hadolint < Dockerfile
          docker build -t mydockerapp .
          docker tag mydockerapp khanalmamun/capstone:latest

      # deploy the image
      - run: docker push khanalmamun/capstone:latest

  deployment:
    docker:
      # Docker image here that supports NodeJS
      - image: amazon/aws-cli:2.7.18
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install kubectl
          command: |
            yum install -y sudo 
            cat kctl.txt >> /etc/yum.repos.d/kubernetes.repo
            sudo yum install -y kubectl
      
      - run:
          name: Join to EKS by kubectl  
          command: |
            aws s3 ls
            aws eks --region us-east-1 update-kubeconfig --name EKSCluster
            kubectl cluster-info
      
      - run:
          name: Deploy app and service 
          command: |
            kubectl apply -f ./k8/deployment.yaml
            kubectl apply -f ./k8/service.yaml 
            kubectl get pod capstone -w
            sleep 3m 
            

      - run:
          name: Roll back to previous deployment if fail
          command: |
            export loadbalancer=$(kubectl get svc capstoneapp -o jsonpath='{.status.loadBalancer.ingress[*].hostname}')
            export RESULT=$(curl  http://${loadbalancer}:3000 | grep -o 'React App')
            if ( RESULT=='React App')
            then 
            echo "ALL Done"
            else 
            kubectl rollout undo deployments/capstoneapp
            fi

            


      
    

            



workflows:
  capstone:
    jobs:
      - build
      - test: 
          requires: [build]
      - lint: 
          requires: [test]
      
      - buildDocker:
          requires:
            - "test"
      - deployment:
          requires:
            - "buildDocker"
          
      
