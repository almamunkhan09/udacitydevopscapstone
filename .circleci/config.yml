version: 2.1

orbs:
  slack: circleci/slack@4.4.4

## jobs
jobs:
  
  build:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      
      - run:
          name: Building the app 
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  test:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      
      - run:
          name: Lint test
          command: |
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  lint:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      
      - run:
          name: Lint test
          command: |
            npm install
            npm run lint
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  scan:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: audit the backend code
          command: |
            npm install
            npm audit fix 
            npm audit fix --audit-level=critical --force
            
  
  buildDocker:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      # start proprietary DB using private Docker image
      # with credentials stored in the UI
      - run: |
          echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
          

      # build the application image and check dockerlint by hadolint 
      - run: |
          docker run --rm -i ghcr.io/hadolint/hadolint < Dockerfile
          docker build -t mydockerapp .
          docker tag mydockerapp khanalmamun/capstone:latest

      # deploy the image
      - run: docker push khanalmamun/capstone:latest

  deployment:
    docker:
      # Docker image here that supports NodeJS
      - image: amazon/aws-cli:2.7.18
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install kubectl
          command: |
            yum install -y sudo 
            cat kctl.txt >> /etc/yum.repos.d/kubernetes.repo
            sudo yum install -y kubectl
      
      - run:
          name: test aws and kubectl 
          command: |
            aws s3 ls
            aws eks --region us-east-1 update-kubeconfig --name EKSCluster
            kubectl cluster-info

      
    

            



workflows:
  capstone:
    jobs:
      # - build
      # - test: 
      #     requires: [build]
      # - lint: 
      #     requires: [test]
      # - scan:
      #     requires:
      #       - "lint"
      # - buildDocker:
      #     requires:
      #       - "scan"
      - deployment
          
      
